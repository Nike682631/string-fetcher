[{"/home/nikunj/string-fetcher/src/App.js":"1","/home/nikunj/string-fetcher/src/reportWebVitals.js":"2","/home/nikunj/string-fetcher/src/index.js":"3","/home/nikunj/string-fetcher/src/stringFetcher.ts":"4","/home/nikunj/string-fetcher/src/Beacon.tsx":"5"},{"size":1274,"mtime":1615194480257,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610724990961,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":1610724990961,"results":"9","hashOfConfig":"7"},{"size":5257,"mtime":1612263212194,"results":"10","hashOfConfig":"7"},{"size":974,"mtime":1614969871476,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"zkgjwg",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"23"},"/home/nikunj/string-fetcher/src/App.js",["27"],"import { useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport run from \"./stringFetcher\";\nimport {client,send} from './Beacon'\nimport { TezosOperationType } from \"@airgap/beacon-sdk\";\n\nfunction App() {\n  const [string, setString] = useState(\"Hello friends\");\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    // run(string);\n    send({\n      kind: TezosOperationType.TRANSACTION,\n      amount: 0,\n      destination: \"KT1VQNU7XC1ZUr4GABrdMCfUaw6cXQ91XxWE\",\n      parameters: string\n    });\n  };\n\n  useEffect(() => {\n    const init  =  async () => client.init();\n    init();\n  },[])\n\n  return (\n    <div className=\"App\">\n      <h1>\n        This is the string - {string} <span></span>\n      </h1>\n      <form onSubmit={handleSubmit}>\n        <label for=\"String\">Enter the string</label>\n        <input\n          type=\"text\"\n          id=\"String\"\n          name=\"String\"\n          value={string}\n          onChange={(e) => setString(e.target.value)}\n        />\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <br />\n      Check the status of block at{\" \"}\n      <a href=\"https://arronax.io/tezos/delphinet/accounts/KT1VQNU7XC1ZUr4GABrdMCfUaw6cXQ91XxWE\">\n        Arronax\n      </a>\n    </div>\n  );\n}\n\nexport default App;\n","/home/nikunj/string-fetcher/src/reportWebVitals.js",[],["28","29"],"/home/nikunj/string-fetcher/src/index.js",[],"/home/nikunj/string-fetcher/src/stringFetcher.ts",["30","31","32","33","34","35","36","37","38","39","40"],"import * as fs from \"fs\";\nimport * as log from \"loglevel\";\nimport fetch from \"node-fetch\"; //Learn more about fetch at https://developers.google.com/web/ilt/pwa/working-with-the-fetch-api\n\nimport { registerFetch, registerLogger } from \"conseiljs\";\nimport {\n  TezosConseilClient,\n  KeyStore,\n  Signer,\n  TezosMessageUtils,\n  TezosNodeReader,\n  TezosNodeWriter,\n  TezosConstants,\n  TezosParameterFormat,\n} from \"conseiljs\";\nimport { KeyStoreUtils, SoftSigner } from \"conseiljs-softsigner\";\n\n// const logger = log.getLogger(\"conseiljs\"); // Using the getLogger() method lets you create a separate logger for each part of your application with its own logging level.\n// logger.setLevel(\"debug\", false); //This disables all logging below the given level, so that after a log.setLevel(\"warn\") call log.warn(\"something\") or log.error(\"something\") will output messages, but log.info(\"something\") will not.\n// //learn more at http://www.lib4dev.in/info/pimterry/loglevel/8976707\n// registerLogger(logger); //Used to register logger variable\n// registerFetch(fetch); //Used to register fetch\n\nconst tezosNode =\n  \"https://cors-anywhere.herokuapp.com/https://tezos-dev.cryptonomic-infra.tech:443\"; //Tezos testnet node\nconst conseilServer = {\n  url:\n    \"https://cors-anywhere.herokuapp.com/https://conseil-dev.cryptonomic-infra.tech:443\", //Conseil testnet node\n  apiKey: \"6bfc2097-39f8-4020-8a3d-3d9d026e8c8d\", //API key\n  network: \"delphinet\",\n}; //Tesnet version\nconst networkBlockTime = 30 + 1;\n\nasync function initAccount(account: string): Promise<KeyStore> {\n  console.log(\"~~ initAccount\");\n  console.log(`loading ${account} faucet file`);\n  const faucetAccount = {\n    mnemonic: [\n      \"spare\",\n      \"practice\",\n      \"gloom\",\n      \"uncover\",\n      \"marble\",\n      \"milk\",\n      \"clutch\",\n      \"audit\",\n      \"burst\",\n      \"catch\",\n      \"arrive\",\n      \"ask\",\n      \"hub\",\n      \"fatigue\",\n      \"mail\",\n    ],\n    secret: \"7f2a991d6f1802937c2cfd18d793f35c98b7f198\",\n    amount: \"23745748033\",\n    pkh: \"tz1McqiPp8HUVQBWLchBXWR5imC4YmdEW4z3\",\n    password: \"HTnjq6EZJ0\",\n    email: \"egszzdbp.hitolfhz@tezos.example.org\",\n  };\n  const keystore = await KeyStoreUtils.restoreIdentityFromFundraiser(\n    faucetAccount.mnemonic.join(\" \"),\n    faucetAccount.email,\n    faucetAccount.password,\n    faucetAccount.pkh\n  );\n\n  return keystore;\n}\n\nasync function revealAccount(keystore: KeyStore) {\n  let signer: Signer = await SoftSigner.createSigner(\n    TezosMessageUtils.writeKeyWithHint(keystore.secretKey, \"edsk\")\n  );\n  console.log(`~~ revealAccount`);\n  if (\n    await TezosNodeReader.isManagerKeyRevealedForAccount(\n      tezosNode,\n      keystore.publicKeyHash\n    )\n  )\n    return;\n  const nodeResult = await TezosNodeWriter.sendKeyRevealOperation(\n    tezosNode,\n    signer,\n    keystore\n  );\n  let groupid = clearRPCOperationGroupHash(nodeResult.operationGroupID);\n  console.log(`Injected reveal operation with ${groupid}`);\n  const conseilResult = await TezosConseilClient.awaitOperationConfirmation(\n    conseilServer,\n    conseilServer.network,\n    groupid,\n    5,\n    networkBlockTime\n  );\n  console.log(`Revealed account at ${conseilResult.source}`);\n  console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\n}\n\nasync function statOperation(groupid: string) {\n  const result = await TezosConseilClient.awaitOperationConfirmation(\n    conseilServer,\n    conseilServer.network,\n    groupid,\n    7,\n    networkBlockTime\n  );\n\n  if (result[\"status\"] === \"failed\") {\n    console.log(\n      `${result[\"kind\"]} ${groupid} ${result[\"status\"]} at block ${result[\"block_level\"]}`\n    );\n  } else if (result[\"status\"] === \"applied\") {\n    let message = `${result[\"kind\"]} ${groupid} included in block ${result[\"block_level\"]} for ${result[\"consumed_gas\"]}g and ${result[\"paid_storage_size_diff\"]}f`;\n\n    if (\n      \"originated_contracts\" in result &&\n      result[\"originated_contracts\"] != null &&\n      result[\"originated_contracts\"].length > 0\n    ) {\n      message += ` new contract at ${result[\"originated_contracts\"]}`;\n    }\n\n    console.log(message);\n  } else {\n    console.log(JSON.stringify(result));\n  }\n}\n\nfunction clearRPCOperationGroupHash(hash: string) {\n  //This operation, and all of the other operations we’ve done, is stored in the “result” variable,\n  // which contains a few operation details. Unfortunately, Tezos testnet currently has a problem\n  //with returning the operation ID. In order to counter this, we have a function that\n  //accepts the ID as an input, and returns the proper ID.\n\n  return hash.replace(/\\\"/g, \"\").replace(/\\n/, \"\");\n}\n\nasync function run(string: string) {\n  const originator = \"tz1McqiPp8HUVQBWLchBXWR5imC4YmdEW4z3\"; //publickeyhash(pkh) of the faucet accounts\n\n  let groupid = \"\";\n  let contractAddress = \"\";\n  let mapid = 0;\n\n  let keystore = await initAccount(originator);\n  await revealAccount(keystore);\n\n  let signer: Signer = await SoftSigner.createSigner(\n    TezosMessageUtils.writeKeyWithHint(keystore.secretKey, \"edsk\")\n  );\n\n  TezosNodeWriter.sendContractInvocationOperation(\n    tezosNode,\n    signer,\n    keystore,\n    \"KT1VQNU7XC1ZUr4GABrdMCfUaw6cXQ91XxWE\",\n    0,\n    50000,\n    500,\n    30000,\n    undefined,\n    `\"${string}\"`,\n    TezosParameterFormat.Michelson\n  );\n}\n\nexport default run;\n",["41","42"],"/home/nikunj/string-fetcher/src/Beacon.tsx",["43","44","45","46","47","48","49","50"],"import {\n    BeaconEvent,\n    BeaconBaseMessage,\n    DAppClient,\n    PermissionScope,\n    PermissionResponseOutput,\n    PartialTezosTransactionOperation,\n    OperationResponseOutput,\n    AccountInfo,\n    defaultEventCallbacks,\n    NetworkType,\n    TezosOperationType,\n    TezosTransactionOperation,\n  } from \"@airgap/beacon-sdk\";\n  \n  export const client = new DAppClient({\n    name: \"String-fetcher\",\n    \n  });\n   \n  export async function connect() {\n    const activeAccount = await client.getActiveAccount();\n    if (activeAccount) return activeAccount;\n  \n    return;\n  }\n  \n  export async function send(operation: PartialTezosTransactionOperation) {\n    client\n      .requestOperation({\n        operationDetails: [operation],\n      })\n      .then((response: OperationResponseOutput) => {\n        console.log(\"transaction hash\", response.transactionHash);\n      })\n      .catch((operationError: BeaconBaseMessage) =>\n        console.error(operationError)\n      );\n  }\n  ",{"ruleId":"51","severity":1,"message":"52","line":3,"column":8,"nodeType":"53","messageId":"54","endLine":3,"endColumn":11},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":1,"column":13,"nodeType":"53","messageId":"54","endLine":1,"endColumn":15},{"ruleId":"59","severity":1,"message":"61","line":2,"column":13,"nodeType":"53","messageId":"54","endLine":2,"endColumn":16},{"ruleId":"59","severity":1,"message":"62","line":3,"column":8,"nodeType":"53","messageId":"54","endLine":3,"endColumn":13},{"ruleId":"59","severity":1,"message":"63","line":5,"column":10,"nodeType":"53","messageId":"54","endLine":5,"endColumn":23},{"ruleId":"59","severity":1,"message":"64","line":5,"column":25,"nodeType":"53","messageId":"54","endLine":5,"endColumn":39},{"ruleId":"59","severity":1,"message":"65","line":13,"column":3,"nodeType":"53","messageId":"54","endLine":13,"endColumn":17},{"ruleId":"59","severity":1,"message":"66","line":101,"column":16,"nodeType":"53","messageId":"54","endLine":101,"endColumn":29},{"ruleId":"67","severity":1,"message":"68","line":137,"column":24,"nodeType":"69","messageId":"70","endLine":137,"endColumn":25,"suggestions":"71"},{"ruleId":"59","severity":1,"message":"72","line":143,"column":7,"nodeType":"53","messageId":"54","endLine":143,"endColumn":14},{"ruleId":"59","severity":1,"message":"73","line":144,"column":7,"nodeType":"53","messageId":"54","endLine":144,"endColumn":22},{"ruleId":"59","severity":1,"message":"74","line":145,"column":7,"nodeType":"53","messageId":"54","endLine":145,"endColumn":12},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"75","line":2,"column":5,"nodeType":"53","messageId":"54","endLine":2,"endColumn":16},{"ruleId":"59","severity":1,"message":"76","line":5,"column":5,"nodeType":"53","messageId":"54","endLine":5,"endColumn":20},{"ruleId":"59","severity":1,"message":"77","line":6,"column":5,"nodeType":"53","messageId":"54","endLine":6,"endColumn":29},{"ruleId":"59","severity":1,"message":"78","line":9,"column":5,"nodeType":"53","messageId":"54","endLine":9,"endColumn":16},{"ruleId":"59","severity":1,"message":"79","line":10,"column":5,"nodeType":"53","messageId":"54","endLine":10,"endColumn":26},{"ruleId":"59","severity":1,"message":"80","line":11,"column":5,"nodeType":"53","messageId":"54","endLine":11,"endColumn":16},{"ruleId":"59","severity":1,"message":"81","line":12,"column":5,"nodeType":"53","messageId":"54","endLine":12,"endColumn":23},{"ruleId":"59","severity":1,"message":"82","line":13,"column":5,"nodeType":"53","messageId":"54","endLine":13,"endColumn":30},"no-unused-vars","'run' is defined but never used.","Identifier","unusedVar","no-native-reassign",["83"],"no-negated-in-lhs",["84"],"@typescript-eslint/no-unused-vars","'fs' is defined but never used.","'log' is defined but never used.","'fetch' is defined but never used.","'registerFetch' is defined but never used.","'registerLogger' is defined but never used.","'TezosConstants' is defined but never used.","'statOperation' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["85","86"],"'groupid' is assigned a value but never used.","'contractAddress' is assigned a value but never used.","'mapid' is assigned a value but never used.","'BeaconEvent' is defined but never used.","'PermissionScope' is defined but never used.","'PermissionResponseOutput' is defined but never used.","'AccountInfo' is defined but never used.","'defaultEventCallbacks' is defined but never used.","'NetworkType' is defined but never used.","'TezosOperationType' is defined but never used.","'TezosTransactionOperation' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"87","fix":"88","desc":"89"},{"messageId":"90","fix":"91","desc":"92"},"removeEscape",{"range":"93","text":"94"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"95","text":"96"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[4530,4531],"",[4530,4530],"\\"]