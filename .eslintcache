[{"/home/nikunj/string-fetcher/src/App.js":"1","/home/nikunj/string-fetcher/src/reportWebVitals.js":"2","/home/nikunj/string-fetcher/src/index.js":"3","/home/nikunj/string-fetcher/src/stringFetcher.ts":"4"},{"size":738,"mtime":1611254545072,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":1610724990961,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":1610724990961,"results":"8","hashOfConfig":"6"},{"size":6424,"mtime":1611256259476,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"175drp4",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/nikunj/string-fetcher/src/App.js",[],"/home/nikunj/string-fetcher/src/reportWebVitals.js",[],"/home/nikunj/string-fetcher/src/index.js",[],["20","21"],"/home/nikunj/string-fetcher/src/stringFetcher.ts",["22","23","24","25","26","27","28","29","30","31","32"],"import * as fs from \"fs\";\nimport * as log from \"loglevel\";\nimport fetch from \"node-fetch\"; //Learn more about fetch at https://developers.google.com/web/ilt/pwa/working-with-the-fetch-api\n\nimport { registerFetch, registerLogger } from \"conseiljs\";\nimport {\n  TezosConseilClient,\n  KeyStore,\n  Signer,\n  TezosMessageUtils,\n  TezosNodeReader,\n  TezosNodeWriter,\n  TezosConstants,\n  TezosParameterFormat,\n} from \"conseiljs\";\nimport { KeyStoreUtils, SoftSigner } from \"conseiljs-softsigner\";\n\n// const logger = log.getLogger(\"conseiljs\"); // Using the getLogger() method lets you create a separate logger for each part of your application with its own logging level.\n// logger.setLevel(\"debug\", false); //This disables all logging below the given level, so that after a log.setLevel(\"warn\") call log.warn(\"something\") or log.error(\"something\") will output messages, but log.info(\"something\") will not.\n// //learn more at http://www.lib4dev.in/info/pimterry/loglevel/8976707\n// registerLogger(logger); //Used to register logger variable\n// registerFetch(fetch); //Used to register fetch\n\nconst tezosNode = \"https://tezos-dev.cryptonomic-infra.tech:443\"; //Tezos testnet node\nconst conseilServer = {\n  url: \"https://conseil-dev.cryptonomic-infra.tech:443\", //Conseil testnet node\n  apiKey: \"6bfc2097-39f8-4020-8a3d-3d9d026e8c8d\", //API key\n  network: \"delphinet\",\n}; //Tesnet version\nconst networkBlockTime = 30 + 1;\n\nasync function initAccount(account: string): Promise<KeyStore> {\n  //In this function we basically take our faucet accounts that we get from https://faucet.tzalpha.net/\n  //and import the downloaded file's content into faucetAccount variable.\n  //Then we create keystore(set of keys) using the restoreIdentityfromfundraiser function in Keystoreutils module\n\n  console.log(\"~~ initAccount\");\n  console.log(`loading ${account} faucet file`);\n  const faucetAccount = {\n    mnemonic: [\n      \"mention\",\n      \"crop\",\n      \"wonder\",\n      \"syrup\",\n      \"bomb\",\n      \"forward\",\n      \"math\",\n      \"october\",\n      \"multiply\",\n      \"penalty\",\n      \"ship\",\n      \"virtual\",\n      \"crumble\",\n      \"unhappy\",\n      \"utility\",\n    ],\n    secret: \"3a341c08c3653d0ceba4a80c4e475785e61e181e\",\n    amount: \"18410048957\",\n    pkh: \"tz1UBGwmgJ4H1CsAC2sJoS987eBaH6NePZnk\",\n    password: \"gv8ogzkeM5\",\n    email: \"svtzhvlx.xrrlifql@tezos.example.org\",\n  };\n  const keystore = await KeyStoreUtils.restoreIdentityFromFundraiser(\n    faucetAccount.mnemonic.join(\" \"),\n    faucetAccount.email,\n    faucetAccount.password,\n    faucetAccount.pkh\n  );\n\n  return keystore;\n}\n\nasync function revealAccount(keystore: KeyStore) {\n  //Every faucet account  needs to be needs to be once  every time we run our code\n  //We do that in this function using sendKeyRevealOperation function in TezosNodeWriter module\n  // isManagerKeyRevealedForAccount function verifies if the account has already sent a reveal operation.\n\n  let signer: Signer = await SoftSigner.createSigner(\n    TezosMessageUtils.writeKeyWithHint(keystore.secretKey, \"edsk\")\n  );\n  console.log(`~~ revealAccount`);\n  if (\n    await TezosNodeReader.isManagerKeyRevealedForAccount(\n      tezosNode,\n      keystore.publicKeyHash\n    )\n  )\n    return;\n  const nodeResult = await TezosNodeWriter.sendKeyRevealOperation(\n    tezosNode,\n    signer,\n    keystore\n  );\n  let groupid = clearRPCOperationGroupHash(nodeResult.operationGroupID);\n  console.log(`Injected reveal operation with ${groupid}`);\n  const conseilResult = await TezosConseilClient.awaitOperationConfirmation(\n    conseilServer,\n    conseilServer.network,\n    groupid,\n    5,\n    networkBlockTime\n  );\n  console.log(`Revealed account at ${conseilResult.source}`);\n  console.log(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");\n}\n\nasync function statOperation(groupid: string) {\n  //The various send functions return an operation group hash which can be passed to\n  //TezosConseilClient.awaitOperationConfirmation(...) to await its appearance on the chain.\n\n  const result = await TezosConseilClient.awaitOperationConfirmation(\n    conseilServer,\n    conseilServer.network,\n    groupid,\n    7,\n    networkBlockTime\n  );\n\n  if (result[\"status\"] === \"failed\") {\n    console.log(\n      `${result[\"kind\"]} ${groupid} ${result[\"status\"]} at block ${result[\"block_level\"]}`\n    );\n  } else if (result[\"status\"] === \"applied\") {\n    let message = `${result[\"kind\"]} ${groupid} included in block ${result[\"block_level\"]} for ${result[\"consumed_gas\"]}g and ${result[\"paid_storage_size_diff\"]}f`;\n\n    if (\n      \"originated_contracts\" in result &&\n      result[\"originated_contracts\"] != null &&\n      result[\"originated_contracts\"].length > 0\n    ) {\n      message += ` new contract at ${result[\"originated_contracts\"]}`;\n    }\n\n    console.log(message);\n  } else {\n    console.log(JSON.stringify(result));\n  }\n}\n\nfunction clearRPCOperationGroupHash(hash: string) {\n  //This operation, and all of the other operations we’ve done, is stored in the “result” variable,\n  // which contains a few operation details. Unfortunately, Tezos testnet currently has a problem\n  //with returning the operation ID. In order to counter this, we have a function that\n  //accepts the ID as an input, and returns the proper ID.\n\n  return hash.replace(/\\\"/g, \"\").replace(/\\n/, \"\");\n}\n\nasync function run(string: string) {\n  const originator = \"tz1UBGwmgJ4H1CsAC2sJoS987eBaH6NePZnk\"; //publickeyhash(pkh) of the faucet accounts\n\n  let groupid = \"\";\n  let contractAddress = \"\";\n  let mapid = 0;\n\n  let keystore = await initAccount(originator);\n  await revealAccount(keystore);\n\n  const storageResult = await TezosNodeReader.getContractStorage(\n    conseilServer.url,\n    originator\n  );\n  let signer: Signer = await SoftSigner.createSigner(\n    TezosMessageUtils.writeKeyWithHint(keystore.secretKey, \"edsk\")\n  );\n\n  let contract = `\n  parameter string;\n  storage   string;\n  code\n    {\n      CAR;        # @parameter\n      # == replace ==\n      # self.data.storedValue = params.value # @parameter\n      NIL operation; # list operation : @parameter\n      PAIR;       # pair (list operation) @parameter\n    };`;\n\n  TezosNodeWriter.sendContractInvocationOperation(\n    conseilServer.url,\n    signer,\n    keystore,\n    contract,\n    0,\n    100,\n    TezosConstants.P005ManagerContractWithdrawalStorageLimit,\n    TezosConstants.P005ManagerContractWithdrawalGasLimit,\n    \"default\",\n    string,\n    TezosParameterFormat.Michelson\n  );\n}\n\nexport default run;\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":1,"column":13,"nodeType":"39","messageId":"40","endLine":1,"endColumn":15},{"ruleId":"37","severity":1,"message":"41","line":2,"column":13,"nodeType":"39","messageId":"40","endLine":2,"endColumn":16},{"ruleId":"37","severity":1,"message":"42","line":3,"column":8,"nodeType":"39","messageId":"40","endLine":3,"endColumn":13},{"ruleId":"37","severity":1,"message":"43","line":5,"column":10,"nodeType":"39","messageId":"40","endLine":5,"endColumn":23},{"ruleId":"37","severity":1,"message":"44","line":5,"column":25,"nodeType":"39","messageId":"40","endLine":5,"endColumn":39},{"ruleId":"37","severity":1,"message":"45","line":107,"column":16,"nodeType":"39","messageId":"40","endLine":107,"endColumn":29},{"ruleId":"46","severity":1,"message":"47","line":146,"column":24,"nodeType":"48","messageId":"49","endLine":146,"endColumn":25,"suggestions":"50"},{"ruleId":"37","severity":1,"message":"51","line":152,"column":7,"nodeType":"39","messageId":"40","endLine":152,"endColumn":14},{"ruleId":"37","severity":1,"message":"52","line":153,"column":7,"nodeType":"39","messageId":"40","endLine":153,"endColumn":22},{"ruleId":"37","severity":1,"message":"53","line":154,"column":7,"nodeType":"39","messageId":"40","endLine":154,"endColumn":12},{"ruleId":"37","severity":1,"message":"54","line":159,"column":9,"nodeType":"39","messageId":"40","endLine":159,"endColumn":22},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"@typescript-eslint/no-unused-vars","'fs' is defined but never used.","Identifier","unusedVar","'log' is defined but never used.","'fetch' is defined but never used.","'registerFetch' is defined but never used.","'registerLogger' is defined but never used.","'statOperation' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["57","58"],"'groupid' is assigned a value but never used.","'contractAddress' is assigned a value but never used.","'mapid' is assigned a value but never used.","'storageResult' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"59","fix":"60","desc":"61"},{"messageId":"62","fix":"63","desc":"64"},"removeEscape",{"range":"65","text":"66"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"67","text":"68"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[5222,5223],"",[5222,5222],"\\"]